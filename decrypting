import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

//MUSTAFA FURKAN ARAS 150116019
public class decrypting {
	static String decryptle(int a, int b, String word) {

		char cryptedword[] = word.toCharArray();
		for (int i = 0; i < word.length(); i++) {
			if (!(cryptedword[i] <= 'z' && cryptedword[i] >= 'a'))// harf deÄŸil ise devam et.
				continue;
			if (cryptedword[i] <= 'z' && cryptedword[i] >= 'a') {// harf ise decrypte
				int r = ((a * ((int) (cryptedword[i] - 97) - b)) % 26);
				if (r < 0)
					r += 26;

				cryptedword[i] = (char) (r + 97);

			}

		}
		String q = "";
		for (int i = 0; i < word.length(); i++) {
			q += cryptedword[i];
		}

		return q;
	}

	static List<String> sozlukokuma() throws IOException {
		File sozluk = new File("C:/Users/furkan/Desktop/dictionary.txt");
		BufferedReader br = new BufferedReader(new FileReader(sozluk));

		List<String> kelimeler = new ArrayList<String>();
		String kelime;
		while ((kelime = br.readLine()) != null)
			kelimeler.add(kelime);

		br.close();

		return kelimeler;
	}

	public static char[] DosyaOku(String URL) {
		File file = new File(URL);
		int dosyaBoyutu = (int) file.length();

		char arr[] = new char[dosyaBoyutu];

		try {
			FileInputStream input = new FileInputStream(file); // dosya okumak icin cairiyoruz

			System.out.println("Dosya uzunlugu : " + dosyaBoyutu); // ekrana dosya uzunlugunu yazdiriyoruz.

			System.out.println();
			for (int i = 0; i < dosyaBoyutu; i++) { // dosyamizin her karakterini okuyoruz.
				arr[i] = (char) input.read(); // ekrana yazdiriyoruz.

			}

			input.close(); // dosya okuma islemimiz bittikten sonra kapatiyoruz.
		} catch (FileNotFoundException e) {
			// TODO: handle exception
			System.out.println("Dosya BulunamadÄ±..");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return arr;
	}

	public static void main(String[] args) throws IOException {
		List<String> sozlukkelimeleri = new ArrayList<String>();
		sozlukkelimeleri = sozlukokuma(); // sozluk listesi oluÅŸturuyoruz.
		char encrytptedArray[] = DosyaOku("C:/Users/furkan/Desktop/yeni.txt");
		String metin = new String(encrytptedArray);// decrypt edecegimiz paragrafi aliyoruz.

		String[] kelimeler = metin.split(" ");// kelimelere ayiriyoruz

		int adegeri = 1;// bulacagÄ±mÄ±z degerler.
		int bdegeri = 0;

		int a;
		boolean z = false, c = false, v = false, n = false;

		int Aaray[] = { 1, 9, 21, 15, 3, 19, 7, 23, 11, 5, 17, 25 };// a degeri icin gcd si 1 olanlari aliyorum.

		looptanCik: for (int x = 0; x < 12; x++) {
			a = Aaray[x];
			for (int b = 0; b < 26; b++) {
				for (int i = 0; i < sozlukkelimeleri.size(); i++) {
					if (sozlukkelimeleri.get(i).equals(decryptle(a, b, kelimeler[0])))
						z = true;

					if (sozlukkelimeleri.get(i).equals(decryptle(a, b, kelimeler[1])))
						c = true;

					if (sozlukkelimeleri.get(i).equals(decryptle(a, b, kelimeler[2])))
						v = true;

					if (sozlukkelimeleri.get(i).equals(decryptle(a, b, kelimeler[3])))
						n = true;
				}
				if ((z && c && v) || (c && v && n) || (z && c && n) || (z && v && n)) {// 4 kelimeden 3 tanesi dogru//
																						// cevrilmis ise bastÄ±r.
					
					adegeri = a;
					bdegeri = b;
					break looptanCik;
				}
				z = false;
				c = false;
				v = false;
				n = false;

			}
		}
		int m=adegeri;	
		m = m % 26; //modular inverse ile a yi buluyoruz.
		for (int p = 1; p < 26; p++) 
			if ((m * p) % 26 == 1)
				m = p;
		
		System.out.println("a nin degeri : " + m);
		System.out.println("b nin degeri : " + bdegeri);
		
		
		// dogrusunu yazdirma kodu.
		for (int i = 0; i < encrytptedArray.length; i++) {
			if (!(encrytptedArray[i] <= 'z' && encrytptedArray[i] >= 'a')) {// harf deÄŸil ise devam et.
				System.out.print(encrytptedArray[i]);
				continue;

			}

			if (encrytptedArray[i] <= 'z' && encrytptedArray[i] >= 'a') {// harf ise decrypte
				int r = ((adegeri * ((int) (encrytptedArray[i] - 97) - bdegeri)) % 26);
				if (r < 0)
					r += 26;

				encrytptedArray[i] = (char) (r + 97);
				System.out.print(encrytptedArray[i]);
			}

		}

	}

}
